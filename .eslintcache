[{"D:\\web\\react\\minesweeper\\src\\index.js":"1","D:\\web\\react\\minesweeper\\src\\reportWebVitals.js":"2","D:\\web\\react\\minesweeper\\src\\App.js":"3","D:\\web\\react\\minesweeper\\src\\component\\toolbar.js":"4","D:\\web\\react\\minesweeper\\src\\component\\board.js":"5","D:\\web\\react\\minesweeper\\src\\component\\gameMode.js":"6","D:\\web\\react\\minesweeper\\src\\component\\restart.js":"7","D:\\web\\react\\minesweeper\\src\\component\\gameInfo.js":"8","D:\\web\\react\\minesweeper\\src\\component\\cell.js":"9","D:\\web\\react\\minesweeper\\src\\component\\start.js":"10","D:\\web\\react\\minesweeper\\src\\component\\messageBox.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":4566,"mtime":1612424810809,"results":"15","hashOfConfig":"13"},{"size":577,"mtime":1612425111754,"results":"16","hashOfConfig":"13"},{"size":6518,"mtime":1612424813764,"results":"17","hashOfConfig":"13"},{"size":827,"mtime":1612424830583,"results":"18","hashOfConfig":"13"},{"size":522,"mtime":1612343601104,"results":"19","hashOfConfig":"13"},{"size":647,"mtime":1612404135597,"results":"20","hashOfConfig":"13"},{"size":2878,"mtime":1612424865250,"results":"21","hashOfConfig":"13"},{"size":1163,"mtime":1612404002111,"results":"22","hashOfConfig":"13"},{"size":1456,"mtime":1612424878279,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1urid1j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\web\\react\\minesweeper\\src\\index.js",[],["48","49"],"D:\\web\\react\\minesweeper\\src\\reportWebVitals.js",[],"D:\\web\\react\\minesweeper\\src\\App.js",[],"D:\\web\\react\\minesweeper\\src\\component\\toolbar.js",[],"D:\\web\\react\\minesweeper\\src\\component\\board.js",["50"],"import React, {Component} from 'react';\r\nimport Cell from './cell';\r\n\r\n\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state={\r\n            board: [],\r\n            boardSize: 0,\r\n            matrix: [],\r\n            flagStatus: [],\r\n        }\r\n    }\r\n\r\n    clearRestart=()=>{\r\n        this.props.clearRestart();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n       \r\n        if(props.matrix != state.matrix){\r\n            let temp1 = [];\r\n            let temp2 = [];\r\n            let n = props.boardSize;\r\n        \r\n            for(let i = 0 ; i < n ; i++){\r\n                let m1 = [];\r\n                let m2 = []\r\n                for(let j = 0 ; j < n ; j++){\r\n                    m1.push(0);\r\n                    m2.push(0)\r\n                }\r\n                temp1.push(m1);\r\n                temp2.push(m2);\r\n            }\r\n            \r\n            return {\r\n                    matrix: props.matrix,\r\n                    board: temp1,\r\n                    boardSize: n,\r\n                    flagStatus: temp2,\r\n                    };\r\n        }else{\r\n            return null\r\n        }\r\n        \r\n    }\r\n\r\n    checkWin=()=>{\r\n        let board = this.state.board;\r\n        let matrix = this.state.matrix;\r\n        let n = this.state.boardSize;\r\n        let result = true;\r\n        for(let i = 0 ; i < n; i ++){\r\n            for(let j = 0 ; j < n ; j ++){\r\n                if(matrix[i][j] !== -1 && board[i][j] === 0){\r\n                    result = false;\r\n                }\r\n            }\r\n        }\r\n        if(result){\r\n           this.props.handleWin();\r\n        }\r\n    }\r\n\r\n    dig =(row,col, board, matrix, boardSize, flagMatrix)=>{\r\n        board[row][col] = 1;\r\n        if(flagMatrix[row][col]){\r\n            flagMatrix[row][col] = 0;\r\n            this.props.handleFlag(row,col, 1);\r\n        }\r\n        if(matrix[row][col]===0){\r\n           \r\n            let blocks = [\r\n                [row + 1, col],\r\n                [row + 1, col - 1],\r\n                [row + 1, col + 1],\r\n                [row, col + 1],\r\n                [row, col - 1],\r\n                [row - 1, col],\r\n                [row - 1, col + 1],\r\n                [row - 1, col - 1]\r\n            ]\r\n            blocks.forEach((item)=>{\r\n                \r\n                if(item[0] >= 0 && item[0] < boardSize && item[1] >= 0 && item[1] < boardSize  && board[item[0]][item[1]] === 0){\r\n                  \r\n                    this.dig(item[0], item[1], board, matrix, boardSize, flagMatrix);\r\n                }\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    handleBoom=()=>{\r\n        let temp = this.state.board;\r\n        for(let i = 0 ; i < this.state.boardSize ; i++){\r\n            for(let j = 0; j < this.state.boardSize; j++){\r\n                temp[i][j] = 1;\r\n            }\r\n        }\r\n        this.setState({\r\n            board: temp,\r\n        })\r\n        this.props.handleLose();\r\n        return 1;\r\n    }\r\n\r\n    onDig=(row,col)=>{\r\n      \r\n        let matrix = this.props.matrix;\r\n        let boardSize = this.props.boardSize;\r\n        let board = this.state.board;\r\n        let flagMatrix = this.state.flagStatus;\r\n        board[row][col] = 1;\r\n        let isLose = 0;\r\n        if(matrix[row][col] === -1){\r\n            isLose = this.handleBoom();\r\n        }\r\n        else{\r\n            this.dig(row, col, board, matrix, boardSize, flagMatrix);\r\n            this.setState({\r\n                board: board,\r\n            })\r\n            \r\n        }\r\n        \r\n        if(!isLose){\r\n            this.checkWin();\r\n        }\r\n    }\r\n\r\n    handleFlag=(row, col, n)=>{\r\n        let temp = this.state.flagStatus;\r\n       \r\n        temp[row][col] = (n === -1) ? 1 : 0;\r\n        this.setState({\r\n            flagStatus: temp,\r\n        })\r\n        this.props.handleFlag(row,col,n);\r\n    }\r\n\r\n    renderMatrix=(matrix)=>{\r\n        let total = 0;\r\n        let statusBoard = this.state.board;\r\n        let n = this.state.boardSize;\r\n        let isFlagable = 1;\r\n        if(this.props.nFlag === 0){\r\n            isFlagable = 0;\r\n        }\r\n        let board = matrix.map((row,nrow)=>{\r\n            let count = nrow%2;\r\n            \r\n            \r\n            return row.map((item,col)=>{\r\n                count++;\r\n                total++;\r\n                let left= 0;\r\n                let right= 0;\r\n                let bottom= 0;\r\n                let top= 0;\r\n                if(statusBoard[nrow][col] === 0){\r\n                    if(nrow > 0){\r\n                        if(statusBoard[nrow-1][col] === 1){\r\n                            top = 1;\r\n                        }\r\n                    }\r\n                    if(nrow < n - 1){\r\n                        if(statusBoard[nrow+1][col] === 1){\r\n                            bottom = 1;\r\n                        }\r\n                    }\r\n                    if(col > 0){\r\n                        if(statusBoard[nrow][col - 1] === 1){\r\n                            left = 1;\r\n                        }\r\n                    }\r\n                    if(col < n - 1){\r\n                        if(statusBoard[nrow][col + 1] === 1){\r\n                            right = 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return <Cell \r\n                            cTyle={count%2} \r\n                            key={total} \r\n                            size={this.props.gameMode} \r\n                            cellValue={item}\r\n                            onDig={this.onDig}\r\n                            row={nrow}\r\n                            col={col}\r\n                            id={total}\r\n                            status={this.state.board[nrow][col]}\r\n                            leftOpened={left}\r\n                            rightOpened={right}\r\n                            topOpened={top}\r\n                            bottomOpened={bottom}\r\n                            handleFlag={this.handleFlag}\r\n                            isFlagable={isFlagable}\r\n                            isFlagOn={this.state.flagStatus[nrow][col]}\r\n                        ></Cell>\r\n                    \r\n            })\r\n            \r\n        })\r\n        return board;\r\n    }\r\n\r\n\r\n\trender(){\r\n        let matrix = this.props.matrix;\r\n        let gameMode = this.props.gameMode;\r\n        let board = this.renderMatrix(matrix);\r\n\r\n\t\treturn (\r\n            <div className={\"game-board board\"+ gameMode}>\r\n                {board}\r\n            </div>\r\n\t\t\r\n\t\t)\r\n\t}\r\n  \t\r\n}\r\n\r\nexport default Board;\r\n","D:\\web\\react\\minesweeper\\src\\component\\gameMode.js",[],"D:\\web\\react\\minesweeper\\src\\component\\restart.js",[],"D:\\web\\react\\minesweeper\\src\\component\\gameInfo.js",[],"D:\\web\\react\\minesweeper\\src\\component\\cell.js",[],"D:\\web\\react\\minesweeper\\src\\component\\start.js",[],"D:\\web\\react\\minesweeper\\src\\component\\messageBox.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":25,"column":25,"nodeType":"57","messageId":"58","endLine":25,"endColumn":27},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]